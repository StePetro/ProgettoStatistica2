Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista - Rating, data = trainData, CV = F)
nom.lda.post = predict(nom.lda, newdata = testData)$posterior[, 2]
accLda[i] = sum((nom.lda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.qda = qda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista - Rating, data = trainData, CV = F)
nom.qda.post = predict(nom.qda, newdata = testData)$posterior[, 2]
accQda[i] = sum((nom.qda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.glm = glm(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista - Rating, family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > 0.5) == (testData$Nomination > 0.5)) / length(testData$Nomination)
}
accGlmMedia[17] = mean(accGlm)
accQdaMedia[17] = mean(accQda)
accLdaMedia[17] = mean(accLda)
#Grafico Accuratezza
plot(
main = "Accuratezza Dopo Riduzione",
accLdaMedia,
type = "l",
col = "green",
xlab = "Fattori Eliminati - 1",
ylab = "Accuratezza Cross Validation Media"
)
lines(accGlmMedia, type = "l", col = "red")
lines(accQdaMedia, type = "l", col = "blue")
legend(
"bottom",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
# Glm 12 0.8008523
# Qda 16 0.7700758
# Lda 9 0.7973485
#10-folds cross validation Modelli Ridotti e Ottimizzati----------------------------------------------------------
set.seed(1255797182)
#Creo 10 partizioni e le mescolo
folds <- cut(seq(1, nrow(nom)), breaks = 10, labels = FALSE)
folds <- folds[sample(nrow(nom))]
#Eseguo la validatione
accGlm = rep(0, 10)
accLda = rep(0, 10)
accQda = rep(0, 10)
cmGlm = matrix(nrow = 2, ncol = 2)
cmLda = matrix(nrow = 2, ncol = 2)
cmQda = matrix(nrow = 2, ncol = 2)
for (i in 1:10) {
testIndexes <- which(folds == i, arr.ind = TRUE)
testData <- nom.log[testIndexes, ]
trainData <- nom.log[-testIndexes, ]
nom.lda = lda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, data = trainData, CV = F)
nom.lda.post = predict(nom.lda, newdata = testData)$posterior[, 2]
accLda[i] = sum((nom.lda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.qda = qda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista, data = trainData, CV = F)
nom.qda.post = predict(nom.qda, newdata = testData)$posterior[, 2]
accQda[i] = sum((nom.qda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.glm = glm(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > 0.5) == (testData$Nomination > 0.5)) / length(testData$Nomination)
if (i > 1) {
cmGlm[1, 1] = cmGlm[1, 1] + sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = cmGlm[1, 2] + sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = cmGlm[2, 1] + sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = cmGlm[2, 2] + sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = cmLda[1, 1] + sum((nom.lda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = cmLda[1, 2] + sum((nom.lda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = cmLda[2, 1] + sum((nom.lda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = cmLda[2, 2] + sum((nom.lda.post <= 0.5) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = cmQda[1, 1] + sum((nom.qda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = cmQda[1, 2] + sum((nom.qda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = cmQda[2, 1] + sum((nom.qda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = cmQda[2, 2] + sum((nom.qda.post <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = c(predGlm, nom.glm.p)
predLda = c(predLda, nom.lda.post)
predQda = c(predQda, nom.qda.post)
actualValue = c(actualValue, testData$Nomination)
} else{
cmGlm[1, 1] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = nom.glm.p
predLda = nom.lda.post
predQda = nom.qda.post
actualValue = testData$Nomination
}
}
#Confronto Curve ROC
library(pROC)
qdaRoc <- roc(actualValue, predQda)
glmRoc <- roc(actualValue, predGlm)
ldaRoc <- roc(actualValue, predLda)
plot(
glmRoc,
col = "red",
main = "Confronto Curve ROC Modelli Ridotti",
ylab = "Sensibilità  (tasso positivi veri)",
xlab = "Specificità  (tasso negativi veri)"
)
lines(ldaRoc, col = "green3")
lines(qdaRoc, col = "blue")
legend(
"bottomright",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
qdaRoc$auc
glmRoc$auc
ldaRoc$auc
#Grafico Cross Validazione
plot(
main = "Cross Validazione Modelli Ridotti",
accLda,
type = "l",
col = "green",
xlab = "Partizione",
ylab = "Accuratezza",
ylim=c(0.5,1)
)
lines(accGlm, type = "l", col = "red")
lines(accQda, type = "l", col = "blue")
legend(
"bottom",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
segments(0,  mean(accLda), n,  mean(accLda), col = "darkGreen")
segments(0, mean(accGlm), n, mean(accGlm), col = "darkRed")
segments(0, mean(accQda), n, mean(accQda), col = "darkBlue")
#Accuratezza Media
mean(accLda)
mean(accGlm)
mean(accQda)
#Matrice di Confusione Totale
cmLda <- data.frame(cmLda)
rownames(cmLda) <- c("predicted 1", "predicted 0")
colnames(cmLda) <- c("actual 1", "actual 0")
cmGlm <- data.frame(cmGlm)
rownames(cmGlm) <- c("predicted 1", "predicted 0")
colnames(cmGlm) <- c("actual 1", "actual 0")
cmQda <- data.frame(cmQda)
rownames(cmQda) <- c("predicted 1", "predicted 0")
colnames(cmQda) <- c("actual 1", "actual 0")
cmLda
cmGlm
cmQda
# Seed secondo test 824292529
#Test Robustezza Modelli Logaritmici--------------------------------------------------
set.seed(-1348923468)
n = nrow(nom)
idx = sample(n, n)
accGlmMedia = rep(0, n)
accLdaMedia = rep(0, n)
accQdaMedia = rep(0, n)
nomScambiata = nom.log
for (j in 1:n) {
if (nomScambiata$Nomination[idx[j]] == 1) {
nomScambiata$Nomination[idx[j]] = 0
} else{
nomScambiata$Nomination[idx[j]] = 1
}
set.seed(1255797182)
#Creo 10 partizioni e le mescolo
folds <- cut(seq(1, nrow(nom)), breaks = 10, labels = FALSE)
folds <- folds[sample(nrow(nom))]
#Eseguo la validatione
accGlm = rep(0, 10)
accLda = rep(0, 10)
accQda = rep(0, 10)
for (i in 1:10) {
testIndexes <- which(folds == i, arr.ind = TRUE)
testData <- nom.log[testIndexes, ]
trainData <- nomScambiata[-testIndexes, ]
nom.lda = lda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, data = trainData, CV = F)
nom.lda.post = predict(nom.lda, newdata = testData)$posterior[, 2]
accLda[i] = sum((nom.lda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.qda = qda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista, data = trainData, CV = F)
nom.qda.post = predict(nom.qda, newdata = testData)$posterior[, 2]
accQda[i] = sum((nom.qda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.glm = glm(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > 0.5) == (testData$Nomination > 0.5)) / length(testData$Nomination)
}
accGlmMedia[j] = mean(accGlm)
accLdaMedia[j] = mean(accLda)
accQdaMedia[j] = mean(accQda)
}
plot(
accGlmMedia,
type = "l",
col = "red",
main = "Confronto Robustezza Modelli Ridotti",
ylab = "Accuratezza Media Convalida Incrociata",
xlab = "Indici Scambiati"
)
lines(accLdaMedia, col = "green")
lines(accQdaMedia, col = "blue")
legend(
"topright",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
segments(-10, 0.7, 250, 0.7, col = "grey")
segments(-10, 0.3, 400, 0.3, col ="grey")
#Gestione Sensibilità----------------------------------------------------------
sensGlm = rep(0, 11)
sensLda = rep(0, 11)
sensQda = rep(0, 11)
accMediaGlm = rep(0, 11)
accMediaLda = rep(0, 11)
accMediaQda = rep(0, 11)
for (j in 1:11) {
set.seed(1255797182)
#Creo 10 partizioni e le mescolo
folds <- cut(seq(1, nrow(nom)), breaks = 10, labels = FALSE)
folds <- folds[sample(nrow(nom))]
#Eseguo la validatione
accGlm = rep(0, 10)
accLda = rep(0, 10)
accQda = rep(0, 10)
cmGlm = matrix(nrow = 2, ncol = 2)
cmLda = matrix(nrow = 2, ncol = 2)
cmQda = matrix(nrow = 2, ncol = 2)
p = 0.5 - ((j-1)*0.05)
for (i in 1:10) {
testIndexes <- which(folds == i, arr.ind = TRUE)
testData <- nom.log[testIndexes, ]
trainData <- nom.log[-testIndexes, ]
nom.lda = lda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, data = trainData, CV = F)
nom.lda.post = predict(nom.lda, newdata = testData)$posterior[, 2]
accLda[i] = sum((nom.lda.post > p ) == (testData$Nomination >p )) /
length(testData$Nomination)
nom.qda = qda(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista, data = trainData, CV = F)
nom.qda.post = predict(nom.qda, newdata = testData)$posterior[, 2]
accQda[i] = sum((nom.qda.post > p ) == (testData$Nomination > p )) /
length(testData$Nomination)
nom.glm = glm(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > p ) == (testData$Nomination > p )) / length(testData$Nomination)
if (i > 1) {
cmGlm[1, 1] = cmGlm[1, 1] + sum((nom.glm.p >=p ) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = cmGlm[1, 2] + sum((nom.glm.p >= p ) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = cmGlm[2, 1] + sum((nom.glm.p <= p ) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = cmGlm[2, 2] + sum((nom.glm.p <= p ) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = cmLda[1, 1] + sum((nom.lda.post >= p ) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = cmLda[1, 2] + sum((nom.lda.post >= p ) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = cmLda[2, 1] + sum((nom.lda.post <= p ) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = cmLda[2, 2] + sum((nom.lda.post <= p ) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = cmQda[1, 1] + sum((nom.qda.post >= p ) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = cmQda[1, 2] + sum((nom.qda.post >= p ) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = cmQda[2, 1] + sum((nom.qda.post <= p ) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = cmQda[2, 2] + sum((nom.qda.post <= p ) &(testData$Nomination == 0)) # true negative
predGlm = c(predGlm, nom.glm.p)
predLda = c(predLda, nom.lda.post)
predQda = c(predQda, nom.qda.post)
actualValue = c(actualValue, testData$Nomination)
} else{
cmGlm[1, 1] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = nom.glm.p
predLda = nom.lda.post
predQda = nom.qda.post
actualValue = testData$Nomination
}
}
sensGlm[j] = cmGlm[1, 1] / (cmGlm[1, 1] + cmGlm[2, 1])
sensLda[j] = cmLda[1, 1] / (cmLda[1, 1] + cmLda[2, 1])
sensQda[j] = cmQda[1, 1] / (cmQda[1, 1] + cmQda[2, 1])
accMediaGlm[j] = mean(accGlm)
accMediaLda[j] = mean(accLda)
accMediaQda[j] = mean(accQda)
}
graficoGlm = matrix(nrow = 11, ncol = 2)
graficoGlm[,2] = accMediaGlm
graficoGlm[,1] = seq(0.50, 0, -0.05 )
graficoLda = matrix(nrow = 11, ncol = 2)
graficoLda[,2] = accMediaLda
graficoLda[,1] = seq(0.50, 0, -0.05 )
graficoQda = matrix(nrow = 11, ncol = 2)
graficoQda[,2] = accMediaQda
graficoQda[,1] = seq(0.50, 0, -0.05 )
#Grafico Accuratezza e Sensibilità
plot(
graficoGlm,
type = "l",
col = "firebrick1",
main = "Confronto Accuratezza e Sensibilità",
ylab = "Accuratezza-Sensibilità Media Convalida Incrociata",
xlab = "Soglia Probabilità Positiva",
ylim = c(0.3,1),
xlim = c(0.50, 0)
)
lines(graficoLda, col = "darkolivegreen1")
lines(graficoQda, col = "cyan")
graficoGlm = matrix(nrow = 11, ncol = 2)
graficoGlm[,2] = sensGlm
graficoGlm[,1] = seq(0.50, 0, -0.05 )
graficoLda = matrix(nrow = 11, ncol = 2)
graficoLda[,2] = sensLda
graficoLda[,1] = seq(0.50, 0, -0.05 )
graficoQda = matrix(nrow = 11, ncol = 2)
graficoQda[,2] = sensQda
graficoQda[,1] = seq(0.50, 0, -0.05 )
lines(graficoGlm, col = "darkred")
lines(graficoLda, col = "darkgreen")
lines(graficoQda, col = "darkblue")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend(
"bottomleft",
legend = c("Accuratezza Glm", "Accuratezza Lda", "Accuratezza Qda", "Sensibilità Glm", "Sensibilità Lda", "Sensibilità Qda"),
col = c("firebrick1", "darkolivegreen1", "cyan", "darkred","darkgreen","darkblue"),
lwd = 2,
cex = 0.6
)
# P = 0.35 glm
set.seed(1255797182)
#Creo 10 partizioni e le mescolo
folds <- cut(seq(1, nrow(nom)), breaks = 10, labels = FALSE)
folds <- folds[sample(nrow(nom))]
#Eseguo la validatione
accGlm = rep(0, 10)
cmGlm = matrix(nrow = 2, ncol = 2)
p = 0.35
for (i in 1:10) {
testIndexes <- which(folds == i, arr.ind = TRUE)
testData <- nom.log[testIndexes, ]
trainData <- nom.log[-testIndexes, ]
nom.glm = glm(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama, family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > p ) == (testData$Nomination > p )) / length(testData$Nomination)
if (i > 1) {
cmGlm[1, 1] = cmGlm[1, 1] + sum((nom.glm.p >=p ) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = cmGlm[1, 2] + sum((nom.glm.p >= p ) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = cmGlm[2, 1] + sum((nom.glm.p <= p ) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = cmGlm[2, 2] + sum((nom.glm.p <= p ) &(testData$Nomination == 0)) # true negative
predGlm = c(predGlm, nom.glm.p)
actualValue = c(actualValue, testData$Nomination)
} else{
cmGlm[1, 1] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = nom.glm.p
actualValue = testData$Nomination
}
}
cmGlm <- data.frame(cmGlm)
rownames(cmGlm) <- c("predicted 1", "predicted 0")
colnames(cmGlm) <- c("actual 1", "actual 0")
cmGlm
#Plot Partizioni ----
# Classi nominali all'interno del dataset
nom.log[,1] <- as.factor(t(as.vector(nom.classe)))
#qda
library(klaR)
partimat(Nomination ~ .- LikesFilm - SRR - BestWikiRankGlobale - Durata - NumeroAttori -
Morti - BestWikiRankLocale - WikiPageQuality - Votanti - Budget - LunghezzaTrama -
LikesProtagonista - IncassoDomestico - Anno - LikesRegista, data = nom.log, method = "qda", col.correct='darkgreen', col.wrong='red')
library(ggplot2)
ggplot(nom.log) +
geom_point(aes(IncassoMondiale, Rating, colour = Nomination))
#10-folds cross validation----------------------------------------------------------
set.seed(1255797182)
#Creo 10 partizioni e le mescolo
folds <- cut(seq(1, nrow(nom)), breaks = 10, labels = FALSE)
folds <- folds[sample(nrow(nom))]
#Eseguo la validatione
accGlm = rep(0, 10)
accLda = rep(0, 10)
accQda = rep(0, 10)
cmGlm = matrix(nrow = 2, ncol = 2)
cmLda = matrix(nrow = 2, ncol = 2)
cmQda = matrix(nrow = 2, ncol = 2)
for (i in 1:10) {
testIndexes <- which(folds == i, arr.ind = TRUE)
testData <- nom[testIndexes, ]
trainData <- nom[-testIndexes, ]
nom.lda = lda(Nomination ~ ., data = trainData, CV = F)
nom.lda.post = predict(nom.lda, newdata = testData)$posterior[, 2]
accLda[i] = sum((nom.lda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.qda = qda(Nomination ~ ., data = trainData, CV = F)
nom.qda.post = predict(nom.qda, newdata = testData)$posterior[, 2]
accQda[i] = sum((nom.qda.post > 0.5) == (testData$Nomination > 0.5)) /
length(testData$Nomination)
nom.glm = glm(Nomination ~ ., family = binomial, data = trainData)
nom.glm.p = predict(nom.glm, type = "response", newdata = testData)
accGlm[i] = sum((nom.glm.p > 0.5) == (testData$Nomination > 0.5)) / length(testData$Nomination)
if (i > 1) {
cmGlm[1, 1] = cmGlm[1, 1] + sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = cmGlm[1, 2] + sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = cmGlm[2, 1] + sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = cmGlm[2, 2] + sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = cmLda[1, 1] + sum((nom.lda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = cmLda[1, 2] + sum((nom.lda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = cmLda[2, 1] + sum((nom.lda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = cmLda[2, 2] + sum((nom.lda.post <= 0.5) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = cmQda[1, 1] + sum((nom.qda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = cmQda[1, 2] + sum((nom.qda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = cmQda[2, 1] + sum((nom.qda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = cmQda[2, 2] + sum((nom.qda.post <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = c(predGlm, nom.glm.p)
predLda = c(predLda, nom.lda.post)
predQda = c(predQda, nom.qda.post)
actualValue = c(actualValue, testData$Nomination)
} else{
cmGlm[1, 1] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 1)) # true positive
cmGlm[1, 2] = sum((nom.glm.p >= 0.5) &(testData$Nomination == 0)) # false positive
cmGlm[2, 1] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 1)) # false negative
cmGlm[2, 2] = sum((nom.glm.p <= 0.5) &(testData$Nomination == 0)) # true negative
cmLda[1, 1] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmLda[1, 2] = sum((nom.lda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmLda[2, 1] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmLda[2, 2] = sum((nom.lda.post <= 0.5) &(testData$Nomination == 0)) # true negative
cmQda[1, 1] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 1)) # true positive
cmQda[1, 2] = sum((nom.qda.post >= 0.5) &(testData$Nomination == 0)) # false positive
cmQda[2, 1] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 1)) # false negative
cmQda[2, 2] = sum((nom.qda.post <= 0.5) &(testData$Nomination == 0)) # true negative
predGlm = nom.glm.p
predLda = nom.lda.post
predQda = nom.qda.post
actualValue = testData$Nomination
}
}
# Curve ROC
library(pROC)
qdaRoc <- roc(actualValue, predQda)
glmRoc <- roc(actualValue, predGlm)
ldaRoc <- roc(actualValue, predLda)
plot(
glmRoc,
col = "red",
main = "Confronto Curve ROC Cross Validazione",
ylab = "Sensibilità  (tasso positivi veri)",
xlab = "Specificità  (tasso negativi veri)"
)
lines(ldaRoc, col = "green3")
lines(qdaRoc, col = "blue")
legend(
"bottomright",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
qdaRoc$auc
glmRoc$auc
ldaRoc$auc
#Grafico Cross Validazione
plot(
main = "Cross Validazione",
accLda,
type = "l",
col = "green",
xlab = "Partizione",
ylab = "Accuratezza",
ylim = c(0.50,1)
)
lines(accGlm, type = "l", col = "red")
lines(accQda, type = "l", col = "blue")
legend(
"topright",
legend = c("glm", "lda", "qda"),
col = c("red", "green", "blue"),
lwd = 2
)
segments(0,  mean(accLda), n,  mean(accLda), col = "darkGreen")
segments(0, mean(accGlm), n, mean(accGlm), col = "darkRed")
segments(0, mean(accQda), n, mean(accQda), col = "darkBlue")
